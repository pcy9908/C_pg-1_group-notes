예제 2-6
#include <stdio.h>

int main(void)
{
   int i;
   for (i = 65; i <= 90; i++)
      printf("%c ", i);

   printf("\n");
ㅐ
   for (i = 97; i <= 122; i++)
      printf("%c ", i);
   
   return 0;
}

알파벳 대문자, 소문자에 따른 i값의 범위는 아스키코드를 이용해 설정했다.
================================================================
#include <stdio.h>

int main(void)
{
   int i, j;

   for (i = 0; i < 5; i++){
      for (j = 0; j < 5; j++)
         printf("1");
      printf("\n");
   }

   
   return 0;
}

이중for문에 대한 것인데 j에 대한 for문이 먼저 실행된다. 그러면 11111 이렇게 될 것인데 그 위에 있는
i에 대한 for문으로 돌아가서 출력을 반복하여 결과적으로는 11111 이 5줄 나오는 결과값을 가지게 된다.
printf("1")을 넣는 이유는 1이란 숫자를 for문으로 나타내기 위함.
=================================================================
예제 6-6
#include <stdio.h>

int main(void)
{
   int i, j, sum;

   printf("다중 for문 예제입니다.\n");

   for (i = 1; i <= 3; i++){
      for (j = 1; j <= 3; j++) {
         sum = i + j;
         printf("%d + %d = %d", i, j, sum);
         printf("\n");

      }
}
   return 0;
}
===============================
예제 6-7
#include <stdio.h>

int main(void)
{
   int i, j;
   for (i = 0; i <= 4; i++)
   {
      for (j = 0; j <= i; j++)
         printf("*");
      printf("\n");

   }

   return 0;
}

반대 방향으로 피라미드를 만들면 어떻게 될까 했음.

#include <stdio.h>

int main(void)
{
   int i, j;
   for (i = 4; i >= 0; i--)
   {
      for (j = 0; j <= i; j++)
         printf("*");
      printf("\n");

   }

   return 0;
}

첫 번째 for문이 열을 형성하기 때문에 행을 형성하는 두 번째 for문에 i만큼 반복하게 만들면 열의
순서에 따라 입력하고자 하는 문자를 출력하게 된다. 
================================================
예제 6-8
#include <stdio.h>

int main(void)
{
   int i, j, count = 0;
   for (i = 2; i <= 100; ++i)
   {
      for (j = 2; j < i; ++j)
      {
         if (i % j == 0)
            break;
      }
      if (j == i)
      {
         count ++;
         printf("%d%s", i, count % 5 ? " " : "\n");
      }
   }
   return 0;
}

이 코딩을 우리 주관대로 해석해보면
if( i % j == 0)은 나머지가 없다. 즉 몫이 나온다는 것은 소수가 되지 않으니까 pass.
if( j == i ) 아래의 count ++; 은 count의 값을 +1 한다는 것이고
printf("%d%s", i, count % 5 ? " " : "\n"); 의 의미를 하나하나 분석하자면
%d는 숫자, %s는 문자열을 의미한다. %d는 i와 연계가 되며 %s는 ( count % 5) 와 연계가 된다.
그렇다면 ? 의 의미는 무엇일까? 결과값을 통한 추정은 조건연산자 ?: 로써 
만약 count % 5 의 값이 0이면 false, 1이면 true가 된다. 항의 개수가 만약 5개 미만이라면 count % 5의 값은 0이 되므로 " ", 즉 공백을 출력하고 5의 배수에 충족한다면 true가 되므로 "\n"이 출력되서 다음 줄로 넘어가게 된다.
================================================
예제 6-18

#include <stdio.h>

int main(void)
{
   int i, sum = 0;

   for(i = 1; i <= 10; i++)
   {
      if (i % 2 == 0) continue;
      sum += i;
   }

   printf("1부터 10까지의 홀수의 합은 %d이다.\n", sum);
   return 0;
}

continue문은 앞 if에 해당하는 조건이 충족되면 아래의 sum += i; 로, 만약 충족되지 않는다면 다시 위의 for문으로 올라가서 i의 값을 1씩 증가하며 다시 if continue를 반복하게 된다.
=========================================================================
#include<stdio.h>

int main(void) {
   int i, count=0;

   for (i = 1; i <= 1000; i++) {
      if (i%2 != 0)
         continue;
      else if (i % 6 == 0) {
         printf("%d ", i);
         count++;
            if(count==10)break;
      }
      
   }
}
여기서 for문에 조건문으로 짝수가 아니면 돌려보내고 짝수일때만 내려와서 else if 의 조건인 
6의 배수에 해당하는지 보고 맞게되면 count가 올라 10개의 출력값만 나오게 된다 
실행 결과는 
6,12,18,24,30,36,42,48,54,60
가 출력된다